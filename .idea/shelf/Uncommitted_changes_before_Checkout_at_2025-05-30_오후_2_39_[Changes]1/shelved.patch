Index: app/src/main/java/com/glowstudio/android/blindsjn/feature/main/view/MainScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.glowstudio.android.blindsjn.feature.main.view\r\n\r\nimport androidx.compose.foundation.layout.*\r\nimport androidx.compose.material3.*\r\nimport androidx.compose.runtime.*\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport androidx.navigation.compose.rememberNavController\r\nimport androidx.navigation.compose.currentBackStackEntryAsState\r\nimport com.glowstudio.android.blindsjn.ui.navigation.mainNavGraph\r\nimport com.glowstudio.android.blindsjn.feature.main.viewmodel.TopBarViewModel\r\nimport com.glowstudio.android.blindsjn.feature.main.viewmodel.NavigationViewModel\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport com.glowstudio.android.blindsjn.feature.board.view.BoardScreen\r\nimport com.glowstudio.android.blindsjn.feature.board.view.BoardDetailScreen\r\nimport com.glowstudio.android.blindsjn.feature.board.view.WritePostScreen\r\nimport com.glowstudio.android.blindsjn.feature.board.view.PostDetailScreen\r\nimport com.glowstudio.android.blindsjn.feature.home.view.HomeScreen\r\nimport com.glowstudio.android.blindsjn.feature.profile.ProfileScreen\r\nimport com.glowstudio.android.blindsjn.feature.calendar.MessageScreen\r\nimport com.glowstudio.android.blindsjn.ui.screens.AddScheduleScreen\r\nimport androidx.navigation.compose.NavHost\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.navArgument\r\nimport java.net.URLDecoder\r\nimport com.google.gson.Gson\r\nimport com.glowstudio.android.blindsjn.ui.theme.BlindSJNTheme\r\nimport com.glowstudio.android.blindsjn.feature.home.view.NewsDetailScreen\r\nimport com.glowstudio.android.blindsjn.data.model.Article\r\nimport com.glowstudio.android.blindsjn.feature.paymanagement.view.PayManagementScreen\r\nimport com.glowstudio.android.blindsjn.feature.foodcost.view.FoodCostScreen\r\nimport com.glowstudio.android.blindsjn.feature.foodcost.RegisterRecipeScreen\r\nimport com.glowstudio.android.blindsjn.feature.foodcost.RegisterIngredientScreen\r\nimport com.glowstudio.android.blindsjn.feature.foodcost.view.RecipeListScreen\r\nimport com.glowstudio.android.blindsjn.feature.foodcost.view.EditRecipeScreen\r\nimport com.glowstudio.android.blindsjn.feature.foodcost.view.IngredientListScreen\r\nimport com.glowstudio.android.blindsjn.feature.main.model.NavigationState\r\nimport com.glowstudio.android.blindsjn.feature.main.viewmodel.BottomBarViewModel\r\nimport com.glowstudio.android.blindsjn.feature.ocr.model.OcrResult\r\n\r\n/**\r\n * 메인 스크린: 상단바, 하단 네비게이션 바, 내부 컨텐츠(AppNavHost)를 포함하여 전체 화면 전환을 관리합니다.\r\n */\r\n\r\n@Composable\r\nfun MainScreen(\r\n    topBarViewModel: TopBarViewModel = viewModel(),\r\n    navigationViewModel: NavigationViewModel = viewModel(),\r\n    bottomBarViewModel: BottomBarViewModel = viewModel(),\r\n    onNavigateToFoodCost: () -> Unit,\r\n    onNavigateToOcr: () -> Unit,\r\n    onNavigateToSalesManagement: (List<OcrResult>, Int) -> Unit\r\n) {\r\n    // 하나의 NavController 생성\r\n    val navController = rememberNavController()\r\n    // TopBarViewModel에서 상단바 상태를 관찰\r\n    val topBarState by topBarViewModel.topBarState.collectAsState()\r\n    \r\n    // 현재 라우트 변경 감지\r\n    val navBackStackEntry by navController.currentBackStackEntryAsState()\r\n    val currentRoute = navBackStackEntry?.destination?.route\r\n\r\n    // 라우트가 변경될 때마다 TopBar 상태 업데이트\r\n    LaunchedEffect(currentRoute) {\r\n        when (currentRoute) {\r\n            \"home\", \"board\", \"paymanagement\", \"foodcoast\", \"message\", \"profile\" -> {\r\n                topBarViewModel.setMainBar()\r\n                bottomBarViewModel.showBottomBar()\r\n            }\r\n            else -> {\r\n                val title = when {\r\n                    currentRoute?.startsWith(\"postDetail/\") == true -> \"게시글\"\r\n                    currentRoute?.startsWith(\"boardDetail/\") == true -> \"게시판\"\r\n                    currentRoute?.startsWith(\"editRecipe/\") == true -> \"레시피 수정\"\r\n                    currentRoute?.startsWith(\"news_main/\") == true -> \"뉴스 메인\"\r\n                    currentRoute?.startsWith(\"news_detail/\") == true -> \"뉴스 상세\"\r\n                    else -> \"\"\r\n                }\r\n                topBarViewModel.setDetailBar(\r\n                    title = title,\r\n                    onBackClick = { navController.navigateUp() }\r\n                )\r\n                bottomBarViewModel.hideBottomBar()\r\n            }\r\n        }\r\n    }\r\n\r\n    val bottomBarRoutes = NavigationState().items.map { it.route }\r\n    val isBottomBarVisible by bottomBarViewModel.isBottomBarVisible.collectAsState()\r\n\r\n    Scaffold(\r\n        // 상단바: TopBarViewModel의 상태를 기반으로 동적으로 업데이트됨\r\n        topBar = {\r\n            TopBar(state = topBarState)\r\n        },\r\n        // 하단 네비게이션 바\r\n        bottomBar = {\r\n            if (isBottomBarVisible) {\r\n                BottomNavigationBar(\r\n                    navController = navController,\r\n                    viewModel = navigationViewModel\r\n                )\r\n            }\r\n        },\r\n        // 내부 컨텐츠: NavHost에 navController와 TopBarViewModel 전달\r\n        content = { paddingValues ->\r\n            // paddingValues에 추가 top padding(예: 16.dp)을 더해 상단바와의 여백을 확보합니다.\r\n            Box(modifier = Modifier.padding(paddingValues)) {\r\n                NavHost(\r\n                    navController = navController,\r\n                    startDestination = \"home\"\r\n                ) {\r\n                    composable(\"home\") { HomeScreen(navController) }\r\n                    composable(\"board\") { BoardScreen(navController) }\r\n                    composable(\"paymanagement\") {\r\n                        PayManagementScreen(\r\n                            onNavigateToSalesManagement = { results, totalAmount ->\r\n                                navController.navigate(\"ocr\")\r\n                            }\r\n                        )\r\n                    }\r\n                    composable(\"message\") { MessageScreen(navController) }\r\n                    composable(\"profile\") { ProfileScreen(\r\n                        onLogoutClick = { /* ... */ },\r\n                        onBusinessCertificationClick = { navController.navigate(\"businessCertification\") },\r\n                        onProfileEditClick = { /* ... */ },\r\n                        onContactEditClick = { /* ... */ }\r\n                    ) }\r\n                    composable(\"foodcoast\") {\r\n                        FoodCostScreen(\r\n                            onRecipeListClick = { navController.navigate(\"recipeList\") },\r\n                            onRegisterRecipeClick = { navController.navigate(\"registerRecipe\") },\r\n                            onIngredientListClick = { navController.navigate(\"ingredientList\") },\r\n                            onRegisterIngredientClick = { navController.navigate(\"registerIngredient\") },\r\n                            onNavigateToPayManagement = { navController.navigate(\"paymanagement\") },\r\n                            onNavigateToFoodCost = { navController.navigate(\"foodcoast\") }\r\n                        )\r\n                    }\r\n                    composable(\"recipeList\") {\r\n                        RecipeListScreen(\r\n                            onEditRecipeClick = { recipeName -> navController.navigate(\"editRecipe/$recipeName\") },\r\n                            onRegisterRecipeClick = { navController.navigate(\"registerRecipe\") }\r\n                        )\r\n                    }\r\n                    composable(\"editRecipe/{recipeName}\") { backStackEntry ->\r\n                        val recipeName = backStackEntry.arguments?.getString(\"recipeName\") ?: \"\"\r\n                        EditRecipeScreen(\r\n                            recipeName = recipeName,\r\n                            onEditIngredientClick = { /* TODO: 재료 수정 화면으로 이동 */ },\r\n                            onSaveClick = { navController.popBackStack() }\r\n                        )\r\n                    }\r\n                    composable(\"ingredientList\") {\r\n                        IngredientListScreen(\r\n                            onEditIngredientClick = { /* TODO: 재료 수정 화면으로 이동 */ },\r\n                            onRegisterIngredientClick = { navController.navigate(\"registerIngredient\") }\r\n                        )\r\n                    }\r\n                    composable(\"registerIngredient\") { RegisterIngredientScreen() }\r\n                    composable(\"registerRecipe\") { RegisterRecipeScreen() }\r\n                    composable(\"boardDetail/{title}\") { backStackEntry ->\r\n                        val encodedTitle = backStackEntry.arguments?.getString(\"title\") ?: \"\"\r\n                        val title = URLDecoder.decode(encodedTitle, \"UTF-8\")\r\n                        BoardDetailScreen(navController, title)\r\n                    }\r\n                    composable(\r\n                        route = \"writePost?tags={tags}\",\r\n                        arguments = listOf(\r\n                            navArgument(\"tags\") {\r\n                                type = NavType.StringType\r\n                                nullable = true\r\n                                defaultValue = null\r\n                            }\r\n                        )\r\n                    ) { backStackEntry ->\r\n                        val tags = backStackEntry.arguments?.getString(\"tags\")\r\n                        WritePostScreen(navController, tags)\r\n                    }\r\n                    composable(\r\n                        route = \"postDetail/{postId}\",\r\n                        arguments = listOf(\r\n                            navArgument(\"postId\") {\r\n                                type = NavType.StringType\r\n                            }\r\n                        )\r\n                    ) { backStackEntry ->\r\n                        val postId = backStackEntry.arguments?.getString(\"postId\") ?: \"\"\r\n                        PostDetailScreen(navController, postId)\r\n                    }\r\n                    composable(\"addSchedule\") {\r\n                        AddScheduleScreen(\r\n                            onCancel = { navController.navigateUp() },\r\n                            onSave = { schedule ->\r\n                                // TODO: 일정 저장 로직 구현\r\n                                navController.navigateUp()\r\n                            }\r\n                        )\r\n                    }\r\n                    composable(\"news_detail/{articleJson}\") { backStackEntry ->\r\n                        val articleJson = backStackEntry.arguments?.getString(\"articleJson\")\r\n                        val article = try {\r\n                            Gson().fromJson(URLDecoder.decode(articleJson, \"UTF-8\"), Article::class.java)\r\n                        } catch (e: Exception) {\r\n                            null\r\n                        }\r\n\r\n                        if (article != null) {\r\n                            NewsDetailScreen(\r\n                                title = article.title ?: \"제목 없음\",\r\n                                content = article.content,\r\n                                description = article.description,\r\n                                imageUrl = article.urlToImage,\r\n                                link = article.link\r\n                            )\r\n                        }\r\n                    }\r\n                    composable(\"businessCertification\") {\r\n                        com.glowstudio.android.blindsjn.feature.certification.BusinessCertificationScreen(\r\n                            navController = navController,\r\n                            onConfirm = { phone, certNumber, industry ->\r\n                                // 인증 완료 후 뒤로가기 또는 원하는 화면 이동\r\n                                navController.popBackStack()\r\n                            }\r\n                        )\r\n                    }\r\n                    composable(\"ocr\") {\r\n                        com.glowstudio.android.blindsjn.feature.ocr.view.CameraScreen(\r\n                            onNavigateToOcrResult = { results ->\r\n                                navController.navigate(\"paymanagement\")\r\n                            }\r\n                        )\r\n                    }\r\n                    mainNavGraph(\r\n                        navController = navController,\r\n                        topBarViewModel = topBarViewModel\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun MainScreenPreview() {\r\n    BlindSJNTheme {\r\n        MainScreen(\r\n            onNavigateToFoodCost = { },\r\n            onNavigateToOcr = { },\r\n            onNavigateToSalesManagement = { _, _ -> }\r\n        )\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/glowstudio/android/blindsjn/feature/main/view/MainScreen.kt b/app/src/main/java/com/glowstudio/android/blindsjn/feature/main/view/MainScreen.kt
--- a/app/src/main/java/com/glowstudio/android/blindsjn/feature/main/view/MainScreen.kt	(revision c190834e9c68e52825db49709cd4ca238cbfe93d)
+++ b/app/src/main/java/com/glowstudio/android/blindsjn/feature/main/view/MainScreen.kt	(date 1748580284887)
@@ -39,6 +39,7 @@
 import com.glowstudio.android.blindsjn.feature.main.model.NavigationState
 import com.glowstudio.android.blindsjn.feature.main.viewmodel.BottomBarViewModel
 import com.glowstudio.android.blindsjn.feature.ocr.model.OcrResult
+import android.net.Uri
 
 /**
  * 메인 스크린: 상단바, 하단 네비게이션 바, 내부 컨텐츠(AppNavHost)를 포함하여 전체 화면 전환을 관리합니다.
@@ -228,7 +229,12 @@
                     composable("ocr") {
                         com.glowstudio.android.blindsjn.feature.ocr.view.CameraScreen(
                             onNavigateToOcrResult = { results ->
-                                navController.navigate("paymanagement")
+                                val resultsJson = Uri.encode(Gson().toJson(results))
+                                navController.navigate("test_ocr_result_screen/$resultsJson")
+                            },
+                            onNavigateToRawOcrResult = { raw ->
+                                val encoded = Uri.encode(raw)
+                                navController.navigate("test_ocr_item_result_screen/$encoded")
                             }
                         )
                     }
Index: app/src/main/java/com/glowstudio/android/blindsjn/ui/navigation/MainNavGraph.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.glowstudio.android.blindsjn.ui.navigation\r\n\r\nimport android.net.Uri\r\nimport androidx.navigation.NavGraphBuilder\r\nimport androidx.navigation.NavHostController\r\nimport androidx.navigation.NavType\r\nimport androidx.navigation.compose.composable\r\nimport androidx.navigation.compose.navigation\r\nimport androidx.navigation.navArgument\r\nimport com.glowstudio.android.blindsjn.feature.board.view.BoardDetailScreen\r\nimport com.glowstudio.android.blindsjn.feature.board.view.BoardScreen\r\nimport com.glowstudio.android.blindsjn.feature.board.view.WritePostScreen\r\nimport com.glowstudio.android.blindsjn.ui.screens.*\r\nimport com.glowstudio.android.blindsjn.feature.main.viewmodel.TopBarViewModel\r\nimport com.glowstudio.android.blindsjn.data.model.Article\r\nimport com.glowstudio.android.blindsjn.feature.board.view.PostDetailScreen\r\nimport com.glowstudio.android.blindsjn.feature.calendar.MessageScreen\r\nimport com.glowstudio.android.blindsjn.feature.certification.BusinessCertificationScreen\r\nimport com.glowstudio.android.blindsjn.feature.home.view.HomeScreen\r\nimport com.glowstudio.android.blindsjn.feature.home.view.NewsDetailScreen\r\nimport com.glowstudio.android.blindsjn.feature.home.NewsListScreen\r\nimport com.glowstudio.android.blindsjn.feature.popular.PopularScreen\r\nimport com.glowstudio.android.blindsjn.feature.profile.ProfileScreen\r\nimport com.glowstudio.android.blindsjn.feature.paymanagement.view.PayManagementScreen\r\nimport com.glowstudio.android.blindsjn.feature.ocr.view.CameraScreen\r\nimport com.glowstudio.android.blindsjn.feature.ocr.model.OcrResult\r\nimport com.glowstudio.android.blindsjn.feature.ocr.view.OcrResultScreen\r\nimport com.google.gson.Gson\r\nimport java.net.URLDecoder\r\n\r\nfun NavGraphBuilder.mainNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"home_screen\",\r\n        route = \"main_nav\"\r\n    ) {\r\n        // 홈 화면\r\n        composable(\"home_screen\") {\r\n            topBarViewModel.setMainBar(\r\n                onSearchClick = { /* 검색 */ },\r\n                onMoreClick = { /* 더보기 */ },\r\n                onNotificationClick = { /* 알림 */ }\r\n            )\r\n            HomeScreen(navController = navController)\r\n        }\r\n\r\n        composable(\"news_detail/{articleJson}\") { backStackEntry ->\r\n            val articleJson = backStackEntry.arguments?.getString(\"articleJson\")\r\n            val article = try {\r\n                Gson().fromJson(URLDecoder.decode(articleJson, \"UTF-8\"), Article::class.java)\r\n            } catch (e: Exception) {\r\n                null\r\n            }\r\n\r\n            topBarViewModel.setDetailBar(\r\n                title = \"\",\r\n                onBackClick = { navController.navigateUp() },\r\n                onSearchClick = { /* 검색 기능 */ },\r\n                onMoreClick = { /* 더보기 메뉴 */ }\r\n            )\r\n\r\n            if (article != null) {\r\n                NewsDetailScreen(\r\n                    title = article.title ?: \"제목 없음\",\r\n                    content = article.content,\r\n                    description = article.description,\r\n                    imageUrl = article.urlToImage,\r\n                    link = article.link\r\n                )\r\n            }\r\n        }\r\n\r\n        composable(\"news_list/{topic}\") { backStackEntry ->\r\n            val topic = backStackEntry.arguments?.getString(\"topic\") ?: \"자영업\"\r\n\r\n            topBarViewModel.setDetailBar(\r\n                title = \"\",\r\n                onBackClick = { navController.navigateUp() },\r\n                onSearchClick = { /* 검색 기능 */ },\r\n                onMoreClick = { /* 더보기 메뉴 */ }\r\n            )\r\n\r\n            NewsListScreen(\r\n                navController = navController,\r\n                selectedTopic = topic\r\n            )\r\n        }\r\n\r\n        // 게시판 네비게이션 그래프\r\n        boardNavGraph(navController, topBarViewModel)\r\n        \r\n        // 인기글 네비게이션 그래프\r\n        popularNavGraph(navController, topBarViewModel)\r\n        \r\n        // 메시지(캘린더) 네비게이션 그래프\r\n        messageNavGraph(navController, topBarViewModel)\r\n        \r\n        // 프로필 네비게이션 그래프\r\n        profileNavGraph(navController, topBarViewModel)\r\n\r\n        // 매출관리 네비게이션 그래프\r\n        payManagementNavGraph(navController, topBarViewModel)\r\n\r\n        // OCR 네비게이션 그래프\r\n        ocrNavGraph(navController, topBarViewModel)\r\n    }\r\n}\r\n\r\nfun NavGraphBuilder.boardNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"board_list_screen\",\r\n        route = \"board_root\"\r\n    ) {\r\n        composable(\"board_list_screen\") {\r\n            topBarViewModel.setMainBar(\r\n                onSearchClick = { /* 검색 */ },\r\n                onMoreClick = { /* 더보기 */ },\r\n                onNotificationClick = { /* 알림 */ }\r\n            )\r\n            BoardScreen(navController = navController)\r\n        }\r\n\r\n        composable(\"board_detail/{title}\") { backStackEntry ->\r\n            val postTitle = backStackEntry.arguments?.getString(\"title\") ?: \"게시글\"\r\n            topBarViewModel.setDetailBar(\r\n                title = postTitle,\r\n                onBackClick = { navController.navigateUp() },\r\n                onSearchClick = { /* 검색 기능 */ },\r\n                onMoreClick = { /* 더보기 메뉴 */ }\r\n            )\r\n            BoardDetailScreen(navController = navController, title = postTitle)\r\n        }\r\n\r\n        composable(\r\n            route = \"write_post_screen/{tags}\",\r\n            arguments = listOf(\r\n                navArgument(\"tags\") {\r\n                    type = NavType.StringType\r\n                    nullable = true\r\n                    defaultValue = null\r\n                }\r\n            )\r\n        ) { backStackEntry ->\r\n            val tags = backStackEntry.arguments?.getString(\"tags\")\r\n            topBarViewModel.setDetailBar(\r\n                title = \"게시글 작성\",\r\n                onBackClick = { navController.navigateUp() }\r\n            )\r\n            WritePostScreen(navController = navController, tags = tags)\r\n        }\r\n\r\n        composable(\r\n            route = \"post_detail/{postId}\",\r\n            arguments = listOf(\r\n                navArgument(\"postId\") {\r\n                    type = NavType.StringType\r\n                    defaultValue = \"1\"\r\n                }\r\n            )\r\n        ) { backStackEntry ->\r\n            val postId = backStackEntry.arguments?.getString(\"postId\") ?: \"1\"\r\n            topBarViewModel.setDetailBar(\r\n                title = \"게시글 상세\",\r\n                onBackClick = { navController.navigateUp() }\r\n            )\r\n            PostDetailScreen(navController = navController, postId = postId)\r\n        }\r\n    }\r\n}\r\n\r\nfun NavGraphBuilder.popularNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"popular_list_screen\",\r\n        route = \"popular_root\"\r\n    ) {\r\n        composable(\"popular_list_screen\") {\r\n            topBarViewModel.setMainBar(\r\n                onSearchClick = { /* 검색 */ },\r\n                onMoreClick = { /* 더보기 */ },\r\n                onNotificationClick = { /* 알림 */ }\r\n            )\r\n            PopularScreen()\r\n        }\r\n    }\r\n}\r\n\r\nfun NavGraphBuilder.messageNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"calendar_screen\",\r\n        route = \"message_root\"\r\n    ) {\r\n        composable(\"calendar_screen\") {\r\n            topBarViewModel.setMainBar(\r\n                onSearchClick = { /* 검색 */ },\r\n                onMoreClick = { /* 더보기 */ },\r\n                onNotificationClick = { /* 알림 */ }\r\n            )\r\n            MessageScreen(navController = navController)\r\n        }\r\n\r\n        composable(\"add_schedule_screen\") {\r\n            topBarViewModel.setDetailBar(\"일정 추가\")\r\n            AddScheduleScreen(\r\n                onCancel = { navController.navigateUp() },\r\n                onSave = { schedule ->\r\n                    navController.navigateUp()\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfun NavGraphBuilder.profileNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"profile_main_screen\",\r\n        route = \"profile_root\"\r\n    ) {\r\n        composable(\"profile_main_screen\") {\r\n            topBarViewModel.setMainBar(\r\n                onSearchClick = { /* 검색 */ },\r\n                onMoreClick = { /* 더보기 */ },\r\n                onNotificationClick = { /* 알림 */ }\r\n            )\r\n            ProfileScreen(\r\n                onLogoutClick = {\r\n                    navController.navigate(\"auth\") {\r\n                        popUpTo(\"main_root\") { inclusive = true }\r\n                        launchSingleTop = true\r\n                    }\r\n                },\r\n                onBusinessCertificationClick = { navController.navigate(\"certification_screen\") },\r\n                onProfileEditClick = { navController.navigate(\"edit_profile_screen\") },\r\n                onContactEditClick = { navController.navigate(\"edit_contact_screen\") }\r\n            )\r\n        }\r\n\r\n        composable(\"certification_screen\") {\r\n            topBarViewModel.setDetailBar(\"사업자 인증\")\r\n            BusinessCertificationScreen(\r\n                navController = navController,\r\n                onConfirm = { phone, certNumber, industry ->\r\n                    navController.navigate(\"someNextRoute\")\r\n                }\r\n            )\r\n        }\r\n\r\n        composable(\"edit_profile_screen\") {\r\n            topBarViewModel.setDetailBar(\"프로필 변경\")\r\n            EditProfileScreen(\r\n                onBackClick = { navController.navigateUp() },\r\n                onSave = {\r\n                    navController.navigateUp()\r\n                }\r\n            )\r\n        }\r\n\r\n        composable(\"edit_contact_screen\") {\r\n            topBarViewModel.setDetailBar(\"연락처 변경\")\r\n            EditContactScreen(\r\n                onBackClick = { navController.navigateUp() },\r\n                onSave = {\r\n                    navController.navigateUp()\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfun NavGraphBuilder.payManagementNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"pay_management_screen\",\r\n        route = \"pay_management_root\"\r\n    ) {\r\n        composable(\"pay_management_screen\") {\r\n            topBarViewModel.setMainBar(\r\n                onSearchClick = { /* 검색 */ },\r\n                onMoreClick = { /* 더보기 */ },\r\n                onNotificationClick = { /* 알림 */ }\r\n            )\r\n            PayManagementScreen(\r\n                onNavigateToSalesManagement = { _, _ ->\r\n                    navController.navigate(\"camera_screen\")\r\n                }\r\n            )\r\n        }\r\n\r\n        composable(\"camera_screen\") {\r\n            topBarViewModel.setDetailBar(\r\n                title = \"매출 입력\",\r\n                onBackClick = { navController.navigateUp() }\r\n            )\r\n            CameraScreen(\r\n                onNavigateToOcrResult = { results ->\r\n                    navController.navigateUp()\r\n                }\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nfun NavGraphBuilder.ocrNavGraph(\r\n    navController: NavHostController,\r\n    topBarViewModel: TopBarViewModel\r\n) {\r\n    navigation(\r\n        startDestination = \"camera_screen\",\r\n        route = \"ocr_root\"\r\n    ) {\r\n        composable(\"camera_screen\") {\r\n            topBarViewModel.setDetailBar(\r\n                title = \"영수증 촬영\",\r\n                onBackClick = { navController.navigateUp() }\r\n            )\r\n            CameraScreen(\r\n                onNavigateToOcrResult = { results ->\r\n                    val resultsJson = Uri.encode(Gson().toJson(results))\r\n                    navController.navigate(\"ocr_result_screen/$resultsJson\")\r\n                }\r\n            )\r\n        }\r\n\r\n        composable(\r\n            route = \"ocr_result_screen/{results}\",\r\n            arguments = listOf(\r\n                navArgument(\"results\") {\r\n                    type = NavType.StringType\r\n                }\r\n            )\r\n        ) { backStackEntry ->\r\n            val resultsJson = backStackEntry.arguments?.getString(\"results\")\r\n            val results = try {\r\n                Gson().fromJson(URLDecoder.decode(resultsJson, \"UTF-8\"), Array<OcrResult>::class.java).toList()\r\n            } catch (e: Exception) {\r\n                emptyList()\r\n            }\r\n\r\n            topBarViewModel.setDetailBar(\r\n                title = \"OCR 결과\",\r\n                onBackClick = { navController.navigateUp() }\r\n            )\r\n            OcrResultScreen(\r\n                results = results\r\n            )\r\n        }\r\n    }\r\n} 
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/glowstudio/android/blindsjn/ui/navigation/MainNavGraph.kt b/app/src/main/java/com/glowstudio/android/blindsjn/ui/navigation/MainNavGraph.kt
--- a/app/src/main/java/com/glowstudio/android/blindsjn/ui/navigation/MainNavGraph.kt	(revision c190834e9c68e52825db49709cd4ca238cbfe93d)
+++ b/app/src/main/java/com/glowstudio/android/blindsjn/ui/navigation/MainNavGraph.kt	(date 1748580284887)
@@ -308,7 +308,12 @@
             )
             CameraScreen(
                 onNavigateToOcrResult = { results ->
-                    navController.navigateUp()
+                    val resultsJson = Uri.encode(Gson().toJson(results))
+                    navController.navigate("ocr_result_screen/$resultsJson")
+                },
+                onNavigateToRawOcrResult = { raw ->
+                    val encoded = Uri.encode(raw)
+                    navController.navigate("test_ocr_result_screen/$encoded")
                 }
             )
         }
@@ -332,6 +337,10 @@
                 onNavigateToOcrResult = { results ->
                     val resultsJson = Uri.encode(Gson().toJson(results))
                     navController.navigate("ocr_result_screen/$resultsJson")
+                },
+                onNavigateToRawOcrResult = { raw ->
+                    val encoded = Uri.encode(raw)
+                    navController.navigate("test_ocr_result_screen/$encoded")
                 }
             )
         }
@@ -359,5 +368,27 @@
                 results = results
             )
         }
+
+        composable(
+            route = "test_ocr_result_screen/{raw}",
+            arguments = listOf(
+                navArgument("raw") { type = NavType.StringType }
+            )
+        ) { backStackEntry ->
+            val rawJson = backStackEntry.arguments?.getString("raw") ?: ""
+            val decoded = try { java.net.URLDecoder.decode(rawJson, "UTF-8") } catch (e: Exception) { rawJson }
+            com.glowstudio.android.blindsjn.feature.ocr.view.TestOcrResultScreen(rawText = decoded)
+        }
+
+        composable(
+            route = "test_ocr_item_result_screen/{raw}",
+            arguments = listOf(
+                navArgument("raw") { type = NavType.StringType }
+            )
+        ) { backStackEntry ->
+            val rawJson = backStackEntry.arguments?.getString("raw") ?: ""
+            val decoded = try { java.net.URLDecoder.decode(rawJson, "UTF-8") } catch (e: Exception) { rawJson }
+            com.glowstudio.android.blindsjn.feature.ocr.view.TestOcrItemResultScreen(rawText = decoded)
+        }
     }
 } 
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n    alias(libs.plugins.kotlin.android)\r\n    alias(libs.plugins.kotlin.compose)\r\n\r\n    // Kotlin serialization plugin for type safe routes and navigation arguments\r\n    kotlin(\"plugin.serialization\") version \"2.0.21\"\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.glowstudio.android.blindsjn\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.glowstudio.android.blindsjn\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        debug {\r\n            buildConfigField(\"String\", \"OCR_API_SECRET\", \"\\\"${System.getenv(\"OCR_API_SECRET\") ?: \"\"}\\\"\")\r\n        }\r\n        release {\r\n            buildConfigField(\"String\", \"OCR_API_SECRET\", \"\\\"${System.getenv(\"OCR_API_SECRET\") ?: \"\"}\\\"\")\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n        // Kotlin DSL에서는 isCoreLibraryDesugaringEnabled를 사용합니다.\r\n        isCoreLibraryDesugaringEnabled = true\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n    buildFeatures {\r\n        compose = true\r\n        buildConfig = true\r\n    }\r\n}\r\n\r\ndependencies {\r\n    // 기본 AndroidX, Compose, Material3, Navigation, Test 의존성\r\n    implementation(libs.androidx.core.ktx)\r\n    implementation(libs.androidx.lifecycle.runtime.ktx)\r\n    implementation(libs.androidx.activity.compose)\r\n    implementation(platform(libs.androidx.compose.bom))\r\n    implementation(libs.androidx.ui)\r\n    implementation(libs.androidx.ui.graphics)\r\n    implementation(libs.androidx.ui.tooling.preview)\r\n    implementation(libs.androidx.material3)\r\n    implementation(libs.play.services.ads.api)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.androidx.junit)\r\n    androidTestImplementation(libs.androidx.espresso.core)\r\n    androidTestImplementation(platform(libs.androidx.compose.bom))\r\n    androidTestImplementation(libs.androidx.ui.test.junit4)\r\n    debugImplementation(libs.androidx.ui.tooling)\r\n    debugImplementation(libs.androidx.ui.test.manifest)\r\n\r\n    // Compose Core 및 Material3\r\n    implementation(\"androidx.compose.ui:ui:1.7.8\")\r\n    implementation(\"androidx.compose.material3:material3:1.3.1\")\r\n    implementation(\"androidx.activity:activity-compose:1.9.3\")\r\n\r\n    // Navigation for Compose\r\n    implementation(\"androidx.navigation:navigation-compose:2.8.4\")\r\n\r\n    // Icons\r\n    implementation(\"androidx.compose.material:material-icons-core:1.7.5\")\r\n    implementation(\"androidx.compose.material:material-icons-extended:1.7.5\")\r\n\r\n    // JSON serialization\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.3\")\r\n\r\n    // Retrofit and Coroutines\r\n    implementation(\"com.squareup.retrofit2:retrofit:2.9.0\")\r\n    implementation(\"com.squareup.retrofit2:converter-gson:2.9.0\")\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3\")\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3\")\r\n\r\n    implementation(\"com.squareup.okhttp3:okhttp:4.9.3\")\r\n    implementation(\"com.squareup.okhttp3:logging-interceptor:4.9.3\")\r\n\r\n    // DataStore for auto-login\r\n    implementation(\"androidx.datastore:datastore-preferences:1.0.0\")\r\n    implementation(\"org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4\")\r\n\r\n    // tess-two for text extraction\r\n    implementation(\"com.rmtheis:tess-two:9.1.0\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout:2.1.4\")\r\n\r\n    // Core Library Desugaring: Java 8+ API를 낮은 API 레벨에서도 사용\r\n    coreLibraryDesugaring(\"com.android.tools:desugar_jdk_libs:2.0.3\")\r\n\r\n    // Coil (이미지 로딩)\r\n    implementation(\"io.coil-kt:coil-compose:2.1.0\")\r\n\r\n    implementation (\"com.google.accompanist:accompanist-pager:0.32.0\")\r\n    implementation (\"com.google.accompanist:accompanist-pager-indicators:0.32.0\")\r\n\r\n    implementation (\"org.jsoup:jsoup:1.15.3\")\r\n\r\n    // CameraX\r\n    val cameraxVersion = \"1.3.1\"\r\n    implementation(\"androidx.camera:camera-core:${cameraxVersion}\")\r\n    implementation(\"androidx.camera:camera-camera2:${cameraxVersion}\")\r\n    implementation(\"androidx.camera:camera-lifecycle:${cameraxVersion}\")\r\n    implementation(\"androidx.camera:camera-view:${cameraxVersion}\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision c190834e9c68e52825db49709cd4ca238cbfe93d)
+++ b/app/build.gradle.kts	(date 1748580500721)
@@ -117,4 +117,6 @@
     implementation("androidx.camera:camera-camera2:${cameraxVersion}")
     implementation("androidx.camera:camera-lifecycle:${cameraxVersion}")
     implementation("androidx.camera:camera-view:${cameraxVersion}")
+
+    implementation ("com.google.code.gson:gson:2.10.1")
 }
\ No newline at end of file
Index: app/src/main/java/com/glowstudio/android/blindsjn/data/network/RetrofitInstance.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.glowstudio.android.blindsjn.data.network\r\n\r\n/**\r\n * URL 서버 통신 객체\r\n *\r\n *\r\n **/\r\n\r\nimport com.glowstudio.android.blindsjn.data.network.ApiService\r\nimport com.google.gson.GsonBuilder\r\nimport okhttp3.OkHttpClient\r\nimport okhttp3.logging.HttpLoggingInterceptor\r\nimport retrofit2.Response\r\nimport retrofit2.Retrofit\r\nimport retrofit2.converter.gson.GsonConverterFactory\r\nimport java.util.concurrent.TimeUnit\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Query\r\n\r\n// 네이버 뉴스 응답 모델\r\ndata class NaverNewsItem(\r\n    val title: String,\r\n    val originallink: String,\r\n    val link: String,\r\n    val description: String,\r\n    val pubDate: String\r\n)\r\n\r\ndata class NaverNewsResponse(\r\n    val items: List<NaverNewsItem>\r\n)\r\n\r\ninterface NaverNewsApiService {\r\n    @GET(\"v1/search/news.json\")\r\n    suspend fun searchNews(\r\n        @Query(\"query\") query: String,\r\n        @Query(\"display\") display: Int = 20,\r\n        @Query(\"start\") start: Int = 1,\r\n        @Query(\"sort\") sort: String = \"date\"\r\n    ): Response<NaverNewsResponse>\r\n}\r\n\r\n// 네이버 뉴스 서버용 Retrofit 인스턴스\r\nobject NaverNewsServer {\r\n    private const val BASE_URL = \"https://openapi.naver.com/\"\r\n\r\n    private val client = OkHttpClient.Builder()\r\n        .addInterceptor { chain ->\r\n            val request = chain.request().newBuilder()\r\n                .addHeader(\"X-Naver-Client-Id\", \"ztMJBFDCJqlNxnax0Hrj\")\r\n                .addHeader(\"X-Naver-Client-Secret\", \"GrIMlIGxdu\")\r\n                .build()\r\n            chain.proceed(request)\r\n        }\r\n        .connectTimeout(30, TimeUnit.SECONDS)\r\n        .readTimeout(30, TimeUnit.SECONDS)\r\n        .writeTimeout(30, TimeUnit.SECONDS)\r\n        .build()\r\n\r\n    val apiService: NaverNewsApiService by lazy {\r\n        Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .client(client)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n            .create(NaverNewsApiService::class.java)\r\n    }\r\n}\r\n\r\n// 내부 서버\r\nobject InternalServer {\r\n\r\n    private const val BASE_URL = \"http://wonrdc.iptime.org/\"\r\n\r\n    private val client by lazy {\r\n        val logging = HttpLoggingInterceptor().apply {\r\n            level = HttpLoggingInterceptor.Level.BODY\r\n        }\r\n\r\n        OkHttpClient.Builder()\r\n            .addInterceptor(logging)\r\n            .build()\r\n    }\r\n\r\n    private val retrofit by lazy {\r\n        Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .client(client)\r\n            .addConverterFactory(GsonConverterFactory.create(GsonBuilder().setLenient().create())) // ← 중요!\r\n            .build()\r\n    }\r\n\r\n    val api: ApiService by lazy {\r\n        retrofit.create(ApiService::class.java)\r\n    }\r\n}\r\n\r\n// 공공 API 서버용 Retrofit 인스턴스\r\nobject PublicApiRetrofitInstance {\r\n    private const val BASE_URL = \"https://api.odcloud.kr/api/\" // 공공 API URL\r\n\r\n    private val retrofit by lazy {\r\n        Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n    }\r\n\r\n    val api: BusinessApiService by lazy {\r\n        retrofit.create(BusinessApiService::class.java)\r\n    }\r\n}\r\n\r\n// OCR API 서버용 Retrofit 인스턴스\r\nobject OcrApiServer {\r\n    private const val BASE_URL = \"https://d7cblqkw1o.apigw.ntruss.com/custom/v1/42447/02392618f64f8a5d3fd1004abc08eb2e9cd4a9eba2e80c21b5ccdf7fa7b73df4/\"\r\n\r\n    private val client = OkHttpClient.Builder()\r\n        .addInterceptor(HttpLoggingInterceptor().apply {\r\n            level = HttpLoggingInterceptor.Level.BODY\r\n        })\r\n        .connectTimeout(30, TimeUnit.SECONDS)\r\n        .readTimeout(30, TimeUnit.SECONDS)\r\n        .writeTimeout(30, TimeUnit.SECONDS)\r\n        .build()\r\n\r\n    val apiService: com.glowstudio.android.blindsjn.feature.ocr.network.OcrApiService by lazy {\r\n        Retrofit.Builder()\r\n            .baseUrl(BASE_URL)\r\n            .client(client)\r\n            .addConverterFactory(GsonConverterFactory.create())\r\n            .build()\r\n            .create(com.glowstudio.android.blindsjn.feature.ocr.network.OcrApiService::class.java)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/glowstudio/android/blindsjn/data/network/RetrofitInstance.kt b/app/src/main/java/com/glowstudio/android/blindsjn/data/network/RetrofitInstance.kt
--- a/app/src/main/java/com/glowstudio/android/blindsjn/data/network/RetrofitInstance.kt	(revision c190834e9c68e52825db49709cd4ca238cbfe93d)
+++ b/app/src/main/java/com/glowstudio/android/blindsjn/data/network/RetrofitInstance.kt	(date 1748574165646)
@@ -116,6 +116,12 @@
     private const val BASE_URL = "https://d7cblqkw1o.apigw.ntruss.com/custom/v1/42447/02392618f64f8a5d3fd1004abc08eb2e9cd4a9eba2e80c21b5ccdf7fa7b73df4/"
 
     private val client = OkHttpClient.Builder()
+        .addInterceptor { chain ->
+            val request = chain.request().newBuilder()
+                .addHeader("X-OCR-SECRET", "bmxVU1pnQUhxVFBKWnJlb3RkaE9ybnRId0NkQ3lOQ3Q=")
+                .build()
+            chain.proceed(request)
+        }
         .addInterceptor(HttpLoggingInterceptor().apply {
             level = HttpLoggingInterceptor.Level.BODY
         })
